{"title":"设计模式概述","slug":"设计模式概述","date":"2021-02-22T02:34:00.000Z","updated":"2021-02-22T02:34:00.000Z","comments":true,"path":"api/articles/设计模式概述.json","excerpt":null,"covers":null,"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h1 id=\"1-软件设计模式的产生背景\"><a href=\"#1-软件设计模式的产生背景\" class=\"headerlink\" title=\"1 软件设计模式的产生背景\"></a>1 软件设计模式的产生背景</h1><p>“设计模式”最初并不是出现在软件设计中，而是被用于建筑领域的设计中。</p>\n<p>1977年美国著名建筑大师、加利福尼亚大学伯克利分校环境结构中心主任<code>克里斯托夫·亚历山大（Christopher Alexander）</code>在他的著作《建筑模式语言：城镇、建筑、构造》中描述了一些常见的建筑设计问题，并提出了 253 种关于对城镇、邻里、住宅、花园和房间等进行设计的基本模式。</p>\n<p>1990年软件工程界开始研讨设计模式的话题，后来召开了多次关于设计模式的研讨会。直到1995 年，艾瑞克·伽马（ErichGamma）、理査德·海尔姆（Richard Helm）、拉尔夫·约翰森（Ralph Johnson）、约翰·威利斯迪斯（John Vlissides）等 4 位作者合作出版了《设计模式：可复用面向对象软件的基础》一书，在此书中收录了 23 个设计模式，这是设计模式领域里程碑的事件，导致了软件设计模式的突破。这 4 位作者在软件开发领域里也以他们的“四人组”（Gang of Four，GoF）著称。  </p>\n<h1 id=\"2-软件设计模式的概念\"><a href=\"#2-软件设计模式的概念\" class=\"headerlink\" title=\"2 软件设计模式的概念\"></a>2 软件设计模式的概念</h1><p>软件设计模式（Software Design Pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。</p>\n<h1 id=\"3-学习设计模式的必要性\"><a href=\"#3-学习设计模式的必要性\" class=\"headerlink\" title=\"3 学习设计模式的必要性\"></a>3 学习设计模式的必要性</h1><p>设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。</p>\n<p>正确使用设计模式具有以下优点。</p>\n<ul>\n<li>可以提高程序员的思维能力、编程能力和设计能力。</li>\n<li>使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期。</li>\n<li>使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强。</li>\n</ul>\n<h1 id=\"4-设计模式分类\"><a href=\"#4-设计模式分类\" class=\"headerlink\" title=\"4 设计模式分类\"></a>4 设计模式分类</h1><ul>\n<li><p><strong>创建型模式</strong></p>\n<p>用于描述“怎样创建对象”，它的主要特点是“将对象的创建与使用分离”。GoF（四人组）书中提供了单例、原型、工厂方法、抽象工厂、建造者等 5 种创建型模式。</p>\n</li>\n<li><p><strong>结构型模式</strong></p>\n<p>用于描述如何将类或对象按某种布局组成更大的结构，GoF（四人组）书中提供了代理、适配器、桥接、装饰、外观、享元、组合等 7 种结构型模式。</p>\n<p>就比如要去盖房子, 需要用钢筋水泥来搭建房屋的框架, 结构型模式就是描述如何搭建框架的设计模式</p>\n</li>\n<li><p><strong>行为型模式</strong></p>\n<p>用于描述类或对象之间怎样相互协作共同完成单个对象无法单独完成的任务，以及怎样分配职责。GoF（四人组）书中提供了模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器等 11 种行为型模式。</p>\n</li>\n</ul>\n","more":"<h1 id=\"1-软件设计模式的产生背景\"><a href=\"#1-软件设计模式的产生背景\" class=\"headerlink\" title=\"1 软件设计模式的产生背景\"></a>1 软件设计模式的产生背景</h1><p>“设计模式”最初并不是出现在软件设计中，而是被用于建筑领域的设计中。</p>\n<p>1977年美国著名建筑大师、加利福尼亚大学伯克利分校环境结构中心主任<code>克里斯托夫·亚历山大（Christopher Alexander）</code>在他的著作《建筑模式语言：城镇、建筑、构造》中描述了一些常见的建筑设计问题，并提出了 253 种关于对城镇、邻里、住宅、花园和房间等进行设计的基本模式。</p>\n<p>1990年软件工程界开始研讨设计模式的话题，后来召开了多次关于设计模式的研讨会。直到1995 年，艾瑞克·伽马（ErichGamma）、理査德·海尔姆（Richard Helm）、拉尔夫·约翰森（Ralph Johnson）、约翰·威利斯迪斯（John Vlissides）等 4 位作者合作出版了《设计模式：可复用面向对象软件的基础》一书，在此书中收录了 23 个设计模式，这是设计模式领域里程碑的事件，导致了软件设计模式的突破。这 4 位作者在软件开发领域里也以他们的“四人组”（Gang of Four，GoF）著称。  </p>\n<h1 id=\"2-软件设计模式的概念\"><a href=\"#2-软件设计模式的概念\" class=\"headerlink\" title=\"2 软件设计模式的概念\"></a>2 软件设计模式的概念</h1><p>软件设计模式（Software Design Pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。</p>\n<h1 id=\"3-学习设计模式的必要性\"><a href=\"#3-学习设计模式的必要性\" class=\"headerlink\" title=\"3 学习设计模式的必要性\"></a>3 学习设计模式的必要性</h1><p>设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。</p>\n<p>正确使用设计模式具有以下优点。</p>\n<ul>\n<li>可以提高程序员的思维能力、编程能力和设计能力。</li>\n<li>使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期。</li>\n<li>使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强。</li>\n</ul>\n<h1 id=\"4-设计模式分类\"><a href=\"#4-设计模式分类\" class=\"headerlink\" title=\"4 设计模式分类\"></a>4 设计模式分类</h1><ul>\n<li><p><strong>创建型模式</strong></p>\n<p>用于描述“怎样创建对象”，它的主要特点是“将对象的创建与使用分离”。GoF（四人组）书中提供了单例、原型、工厂方法、抽象工厂、建造者等 5 种创建型模式。</p>\n</li>\n<li><p><strong>结构型模式</strong></p>\n<p>用于描述如何将类或对象按某种布局组成更大的结构，GoF（四人组）书中提供了代理、适配器、桥接、装饰、外观、享元、组合等 7 种结构型模式。</p>\n<p>就比如要去盖房子, 需要用钢筋水泥来搭建房屋的框架, 结构型模式就是描述如何搭建框架的设计模式</p>\n</li>\n<li><p><strong>行为型模式</strong></p>\n<p>用于描述类或对象之间怎样相互协作共同完成单个对象无法单独完成的任务，以及怎样分配职责。GoF（四人组）书中提供了模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器等 11 种行为型模式。</p>\n</li>\n</ul>\n","categories":[{"name":"JAVA","path":"api/categories/JAVA.json"}],"tags":[{"name":"编程","path":"api/tags/编程.json"},{"name":"设计模式","path":"api/tags/设计模式.json"}]}