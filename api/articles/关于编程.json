{"title":"关于编程","slug":"关于编程","date":"2020-06-28T02:43:00.000Z","updated":"2020-06-28T05:30:00.000Z","comments":true,"path":"api/articles/关于编程.json","excerpt":null,"covers":["http://picture.saintblog.top/ide/biancheng_cengji.jpeg"],"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h2 id=\"如何选择一门编程语言\"><a href=\"#如何选择一门编程语言\" class=\"headerlink\" title=\"如何选择一门编程语言\"></a>如何选择一门编程语言</h2><p>大学四年下来，学校肯定都会教至少三门的编程语言，我们学校包括<code>C</code>、<code>C++</code>、<code>Java</code>，我自己是软件专业的，选择前端方向的话还会有另外学<code>php</code>，部分专业还有学<code>python</code>。这么多语言，应该如何学习编程语言呢？？</p>\n<ol>\n<li>如果你对编程语言相关的领域就业问题不清楚的话，那么就跟着学校给安排的课程，学校教什么就学什么，当然这是不推荐的学习方法，太过于被动了，而且学校教的编程太过于简单了。</li>\n<li>如果提前了解了编程语言以及未来就业的方向，那么你就直接计划学习路线就可以开始自己的学习了。</li>\n</ol>\n<p>当然，如果大学只是听懂了和学会了学校教的编程课，比如 <code>C</code> 或 <code>Java</code> ，那就只是满足了学校对学生的要求，并不是满足了社会对专业的需求。</p>\n<p>ok，不扯其他的了。如果确定是要步入程序员这个行业，那么最好是大一就尽早确定一个就业方向，比如<strong>Java后端工程师</strong>、<strong>前端工程师</strong>、<strong>数据库管理员</strong>等等。当然了，就语言来说，Java依然是主流，python也是一个不错的选择。</p>\n<p>各个层级：</p>\n<ul>\n<li>硬件：内存、显卡、CPU等电脑硬件</li>\n<li>汇编：可读性差，但是现在有编译器，所以市场汇编语言的工程师需求量很少。</li>\n<li>系统：就是我们日常所说的系统，windows、linux、mac等等</li>\n<li>应用：软件的程序的执行流程和功能，开发起来体量大</li>\n<li>脚本：脚本级语言的代码很直给的，代码速度快。但是虽然可读性强，但是编译器把脚本语言翻译成汇编语言的成本很大。</li>\n</ul>\n<p><img src= \"/img/loading.gif\" data-src=\"http://picture.saintblog.top/ide/biancheng_cengji.jpeg\" alt=\"编程层级\"></p>\n<p>先来看看各个语言的应用领域：</p>\n<ul>\n<li>C：系统底层、驱动程序、嵌入式底层，基础服务程序</li>\n<li>C++：上层服务程序、应用API、大型3D游戏</li>\n<li>Java：服务端应用程序，以及客户端应用程序</li>\n<li>JavaScript：在浏览器中运行的程序</li>\n<li>PHP：web服务端用于生成网页的程序</li>\n<li>Python：任意无图形界面应用程序，以服务端应用程序为主</li>\n</ul>\n<h2 id=\"前端与后端\"><a href=\"#前端与后端\" class=\"headerlink\" title=\"前端与后端\"></a>前端与后端</h2><p>在<code>web开发</code>还有一个后端开发与前端开发的区别：</p>\n<ol>\n<li><p>前端开发：</p>\n<p>网站的前端是直接与用户交互的部分，前端工程师的主要职责是处理面向用户的界面。所有涉及到的可视化的内容，以及在这些可视化内容基础上的数据交互，包括浏览网页时解除的所有东西，包括字体、颜色、导航栏、下拉菜单、侧边栏等等。这些视觉上的东西，都是由浏览器解析、处理、渲染相关的HTML、CSS、JavaScript文件后展示出来的。前端开发就是创造上面提到的网站面向用户的部分背后的代码，并通过建立框架，提升用户体验。当然前端也有框架，目前主流的前端框架分别是<code>Vue</code>、<code>React</code>、<code>Angular</code></p>\n</li>\n<li><p>后端开发：</p>\n<p>后端开发的工程师需要掌握的东西要多得多，从编程语言上来看，如果是JavaScript中的NodeJS的话，可以用<code>express</code>框架来开发服务端；用python的话可以用<code>django</code>和<code>pyramid</code>来开发服务端；用PHP来开发的话，可以用<code>laravel</code>框架，Java的话可以用<code>ssm</code>、<code>springboot</code>等框架来开发；涉及到数据库的，如果是关系型数据库（Mysql、Oracle、SQLServer等）对于后端工程师一定要精通SQL，如果是非关系型数据库（Redis、MangoDB、SqlLite等）的话，那么就要对key-value(键值对)或者说是json和对应的数据库工具精通。当然后端的工作还不知这些，感兴趣可以自行了解。</p>\n</li>\n</ol>\n","more":"<h2 id=\"如何选择一门编程语言\"><a href=\"#如何选择一门编程语言\" class=\"headerlink\" title=\"如何选择一门编程语言\"></a>如何选择一门编程语言</h2><p>大学四年下来，学校肯定都会教至少三门的编程语言，我们学校包括<code>C</code>、<code>C++</code>、<code>Java</code>，我自己是软件专业的，选择前端方向的话还会有另外学<code>php</code>，部分专业还有学<code>python</code>。这么多语言，应该如何学习编程语言呢？？</p>\n<ol>\n<li>如果你对编程语言相关的领域就业问题不清楚的话，那么就跟着学校给安排的课程，学校教什么就学什么，当然这是不推荐的学习方法，太过于被动了，而且学校教的编程太过于简单了。</li>\n<li>如果提前了解了编程语言以及未来就业的方向，那么你就直接计划学习路线就可以开始自己的学习了。</li>\n</ol>\n<p>当然，如果大学只是听懂了和学会了学校教的编程课，比如 <code>C</code> 或 <code>Java</code> ，那就只是满足了学校对学生的要求，并不是满足了社会对专业的需求。</p>\n<p>ok，不扯其他的了。如果确定是要步入程序员这个行业，那么最好是大一就尽早确定一个就业方向，比如<strong>Java后端工程师</strong>、<strong>前端工程师</strong>、<strong>数据库管理员</strong>等等。当然了，就语言来说，Java依然是主流，python也是一个不错的选择。</p>\n<p>各个层级：</p>\n<ul>\n<li>硬件：内存、显卡、CPU等电脑硬件</li>\n<li>汇编：可读性差，但是现在有编译器，所以市场汇编语言的工程师需求量很少。</li>\n<li>系统：就是我们日常所说的系统，windows、linux、mac等等</li>\n<li>应用：软件的程序的执行流程和功能，开发起来体量大</li>\n<li>脚本：脚本级语言的代码很直给的，代码速度快。但是虽然可读性强，但是编译器把脚本语言翻译成汇编语言的成本很大。</li>\n</ul>\n<p><img src=\"http://picture.saintblog.top/ide/biancheng_cengji.jpeg\" alt=\"编程层级\"></p>\n<p>先来看看各个语言的应用领域：</p>\n<ul>\n<li>C：系统底层、驱动程序、嵌入式底层，基础服务程序</li>\n<li>C++：上层服务程序、应用API、大型3D游戏</li>\n<li>Java：服务端应用程序，以及客户端应用程序</li>\n<li>JavaScript：在浏览器中运行的程序</li>\n<li>PHP：web服务端用于生成网页的程序</li>\n<li>Python：任意无图形界面应用程序，以服务端应用程序为主</li>\n</ul>\n<h2 id=\"前端与后端\"><a href=\"#前端与后端\" class=\"headerlink\" title=\"前端与后端\"></a>前端与后端</h2><p>在<code>web开发</code>还有一个后端开发与前端开发的区别：</p>\n<ol>\n<li><p>前端开发：</p>\n<p>网站的前端是直接与用户交互的部分，前端工程师的主要职责是处理面向用户的界面。所有涉及到的可视化的内容，以及在这些可视化内容基础上的数据交互，包括浏览网页时解除的所有东西，包括字体、颜色、导航栏、下拉菜单、侧边栏等等。这些视觉上的东西，都是由浏览器解析、处理、渲染相关的HTML、CSS、JavaScript文件后展示出来的。前端开发就是创造上面提到的网站面向用户的部分背后的代码，并通过建立框架，提升用户体验。当然前端也有框架，目前主流的前端框架分别是<code>Vue</code>、<code>React</code>、<code>Angular</code></p>\n</li>\n<li><p>后端开发：</p>\n<p>后端开发的工程师需要掌握的东西要多得多，从编程语言上来看，如果是JavaScript中的NodeJS的话，可以用<code>express</code>框架来开发服务端；用python的话可以用<code>django</code>和<code>pyramid</code>来开发服务端；用PHP来开发的话，可以用<code>laravel</code>框架，Java的话可以用<code>ssm</code>、<code>springboot</code>等框架来开发；涉及到数据库的，如果是关系型数据库（Mysql、Oracle、SQLServer等）对于后端工程师一定要精通SQL，如果是非关系型数据库（Redis、MangoDB、SqlLite等）的话，那么就要对key-value(键值对)或者说是json和对应的数据库工具精通。当然后端的工作还不知这些，感兴趣可以自行了解。</p>\n</li>\n</ol>\n","categories":[{"name":"编程","path":"api/categories/编程.json"}],"tags":[]}