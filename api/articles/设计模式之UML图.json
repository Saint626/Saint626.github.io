{"title":"设计模式之UML图介绍","slug":"设计模式之UML图","date":"2021-02-22T06:12:00.000Z","updated":"2021-02-22T06:12:00.000Z","comments":true,"path":"api/articles/设计模式之UML图.json","excerpt":null,"covers":["https://picture.saintblog.top/DesignPatterns/uml/demo.png","https://picture.saintblog.top/DesignPatterns/uml/demo.png","https://picture.saintblog.top/DesignPatterns/uml/customer_address.png","https://picture.saintblog.top/DesignPatterns/uml/customer_product.png","https://picture.saintblog.top/DesignPatterns/uml/node.png","https://picture.saintblog.top/DesignPatterns/uml/image-20191229173422328.png","https://picture.saintblog.top/DesignPatterns/uml/image-20191229173455149.png","https://picture.saintblog.top/DesignPatterns/uml/image-20191229173518926.png","https://picture.saintblog.top/DesignPatterns/uml/image-20191229173539838.png","https://picture.saintblog.top/DesignPatterns/uml/image-20191229173554296.png"],"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h1 id=\"1-类图概述\"><a href=\"#1-类图概述\" class=\"headerlink\" title=\"1 类图概述\"></a>1 类图概述</h1><p>类图<code>(Class diagram)</code>是显示了模型的静态结构，特别是模型中存在的类、类的内部结构以及它们与其他类的关系等。类图不显示暂时性的信息。类图是面向对象建模的主要组成部分。</p>\n<h1 id=\"2-类图的作用\"><a href=\"#2-类图的作用\" class=\"headerlink\" title=\"2 类图的作用\"></a>2 类图的作用</h1><ul>\n<li>在软件工程中，类图是一种静态的结构图，描述了系统的类的集合，类的属性和类之间的关系，可以简化了人们对系统的理解；</li>\n<li>类图是系统分析和设计阶段的重要产物，是系统编码和测试的重要模型。</li>\n</ul>\n<h1 id=\"3-类图表示法\"><a href=\"#3-类图表示法\" class=\"headerlink\" title=\"3 类图表示法\"></a>3 类图表示法</h1><h2 id=\"3-1-类的表示方式\"><a href=\"#3-1-类的表示方式\" class=\"headerlink\" title=\"3.1 类的表示方式\"></a>3.1 类的表示方式</h2><p>在UML类图中，类使用包含类名、属性(field) 和方法(method) 且带有分割线的矩形来表示，比如下图表示一个Employee类，它包含name,age和address这3个属性，以及work()方法。 </p>\n<p><img src= \"/img/loading.gif\" data-src=\"https://picture.saintblog.top/DesignPatterns/uml/demo.png\" alt=\"\"></p>\n<p>属性/方法名称前加的加号和减号表示了这个属性/方法的可见性，UML类图中表示可见性的符号有三种：</p>\n<ul>\n<li><p>+：表示public</p>\n</li>\n<li><p>-：表示private</p>\n</li>\n<li><p>#：表示protected</p>\n</li>\n</ul>\n<p>属性的完整表示方式是： <strong>可见性  名称 ：类型 [ = 缺省值]</strong>  </p>\n<p>方法的完整表示方式是： <strong>可见性  名称(参数列表) [ ： 返回类型]</strong></p>\n<blockquote>\n<p>注意：</p>\n<p>​    1，中括号中的内容表示是可选的</p>\n<p>​    2，也有将类型放在变量名前面，返回值类型放在方法名前面</p>\n</blockquote>\n<p><strong>举个栗子：</strong></p>\n<p><img src= \"/img/loading.gif\" data-src=\"https://picture.saintblog.top/DesignPatterns/uml/demo.png\" alt=\"\"></p>\n<p>上图Demo类定义了三个方法：</p>\n<ul>\n<li>method()方法：修饰符为public，没有参数，没有返回值。</li>\n<li>method1()方法：修饰符为private，没有参数，返回值类型为String。</li>\n<li>method2()方法：修饰符为protected，接收两个参数，第一个参数类型为int，第二个参数类型为String，返回值类型是int。</li>\n</ul>\n<h2 id=\"3-2-类与类之间关系的表示方式\"><a href=\"#3-2-类与类之间关系的表示方式\" class=\"headerlink\" title=\"3.2 类与类之间关系的表示方式\"></a>3.2 类与类之间关系的表示方式</h2><h3 id=\"3-2-1-关联关系\"><a href=\"#3-2-1-关联关系\" class=\"headerlink\" title=\"3.2.1 关联关系\"></a>3.2.1 关联关系</h3><p>关联关系是对象之间的一种引用关系，用于表示一类对象与另一类对象之间的联系，如老师和学生、师傅和徒弟、丈夫和妻子等。关联关系是类与类之间最常用的一种关系，分为一般关联关系、聚合关系和组合关系。我们先介绍一般关联。</p>\n<p>关联又可以分为单向关联，双向关联，自关联。</p>\n<p><strong>1，单向关联</strong></p>\n<p><img src= \"/img/loading.gif\" data-src=\"https://picture.saintblog.top/DesignPatterns/uml/customer_address.png\" alt=\"\"></p>\n<p>在UML类图中单向关联用一个带箭头的实线表示。上图表示每个顾客都有一个地址，这通过让Customer类持有一个类型为Address的成员变量类实现。</p>\n<p><strong>2，双向关联</strong></p>\n<p><img src= \"/img/loading.gif\" data-src=\"https://picture.saintblog.top/DesignPatterns/uml/customer_product.png\" alt=\"\"></p>\n<p>从上图中我们很容易看出，所谓的双向关联就是双方各自持有对方类型的成员变量。</p>\n<p>在UML类图中，双向关联用一个不带箭头的直线表示。上图中在Customer类中维护一个List&lt;Product&gt;，表示一个顾客可以购买多个商品；在Product类中维护一个Customer类型的成员变量表示这个产品被哪个顾客所购买。</p>\n<p><strong>3，自关联</strong></p>\n<p><img src= \"/img/loading.gif\" data-src=\"https://picture.saintblog.top/DesignPatterns/uml/node.png\" alt=\"\"></p>\n<p>自关联在UML类图中用一个带有箭头且指向自身的线表示。上图的意思就是Node类包含类型为Node的成员变量，也就是“自己包含自己”。</p>\n<h3 id=\"3-2-2-聚合关系\"><a href=\"#3-2-2-聚合关系\" class=\"headerlink\" title=\"3.2.2 聚合关系\"></a>3.2.2 聚合关系</h3><p>聚合关系是关联关系的一种，是强关联关系，是整体和部分之间的关系。</p>\n<p>聚合关系也是通过成员对象来实现的，其中成员对象是整体对象的一部分，但是成员对象可以脱离整体对象而独立存在。例如，学校与老师的关系，学校包含老师，但如果学校停办了，老师依然存在。</p>\n<p>在 UML 类图中，聚合关系可以用带空心菱形的实线来表示，菱形指向整体。下图所示是大学和教师的关系图：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"https://picture.saintblog.top/DesignPatterns/uml/image-20191229173422328.png\" alt=\"\"></p>\n<h3 id=\"3-2-3-组合关系\"><a href=\"#3-2-3-组合关系\" class=\"headerlink\" title=\"3.2.3 组合关系\"></a>3.2.3 组合关系</h3><p>组合表示类之间的整体与部分的关系，但它是一种更强烈的聚合关系。</p>\n<p>在组合关系中，整体对象可以控制部分对象的生命周期，一旦整体对象不存在，部分对象也将不存在，部分对象不能脱离整体对象而存在。例如，头和嘴的关系，没有了头，嘴也就不存在了。</p>\n<p>在 UML 类图中，组合关系用带实心菱形的实线来表示，菱形指向整体。下图所示是头和嘴的关系图：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"https://picture.saintblog.top/DesignPatterns/uml/image-20191229173455149.png\" alt=\"\"></p>\n<h3 id=\"3-2-4-依赖关系\"><a href=\"#3-2-4-依赖关系\" class=\"headerlink\" title=\"3.2.4 依赖关系\"></a>3.2.4 依赖关系</h3><p>依赖关系是一种使用关系，它是对象之间耦合度最弱的一种关联方式，是临时性的关联。在代码中，某个类的方法通过局部变量、方法的参数或者对静态方法的调用来访问另一个类（被依赖类）中的某些方法来完成一些职责。</p>\n<p>在 UML 类图中，依赖关系使用带箭头的虚线来表示，箭头从使用类指向被依赖的类。下图所示是司机和汽车的关系图，司机驾驶汽车：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"https://picture.saintblog.top/DesignPatterns/uml/image-20191229173518926.png\" alt=\"\"></p>\n<h3 id=\"3-2-5-继承关系\"><a href=\"#3-2-5-继承关系\" class=\"headerlink\" title=\"3.2.5 继承关系\"></a>3.2.5 继承关系</h3><p>继承关系是对象之间耦合度最大的一种关系，表示一般与特殊的关系，是父类与子类之间的关系，是一种继承关系。</p>\n<p>在 UML 类图中，泛化关系用带空心三角箭头的实线来表示，箭头从子类指向父类。在代码实现时，使用面向对象的继承机制来实现泛化关系。例如，Student 类和 Teacher 类都是 Person 类的子类，其类图如下图所示：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"https://picture.saintblog.top/DesignPatterns/uml/image-20191229173539838.png\" alt=\"\"></p>\n<h3 id=\"3-2-6-实现关系\"><a href=\"#3-2-6-实现关系\" class=\"headerlink\" title=\"3.2.6 实现关系\"></a>3.2.6 实现关系</h3><p>实现关系是接口与实现类之间的关系。在这种关系中，类实现了接口，类中的操作实现了接口中所声明的所有的抽象操作。</p>\n<p>在 UML 类图中，实现关系使用带空心三角箭头的虚线来表示，箭头从实现类指向接口。例如，汽车和船实现了交通工具，其类图如图 9 所示。</p>\n<p><img src= \"/img/loading.gif\" data-src=\"https://picture.saintblog.top/DesignPatterns/uml/image-20191229173554296.png\" alt=\"\"></p>\n","more":"<h1 id=\"1-类图概述\"><a href=\"#1-类图概述\" class=\"headerlink\" title=\"1 类图概述\"></a>1 类图概述</h1><p>类图<code>(Class diagram)</code>是显示了模型的静态结构，特别是模型中存在的类、类的内部结构以及它们与其他类的关系等。类图不显示暂时性的信息。类图是面向对象建模的主要组成部分。</p>\n<h1 id=\"2-类图的作用\"><a href=\"#2-类图的作用\" class=\"headerlink\" title=\"2 类图的作用\"></a>2 类图的作用</h1><ul>\n<li>在软件工程中，类图是一种静态的结构图，描述了系统的类的集合，类的属性和类之间的关系，可以简化了人们对系统的理解；</li>\n<li>类图是系统分析和设计阶段的重要产物，是系统编码和测试的重要模型。</li>\n</ul>\n<h1 id=\"3-类图表示法\"><a href=\"#3-类图表示法\" class=\"headerlink\" title=\"3 类图表示法\"></a>3 类图表示法</h1><h2 id=\"3-1-类的表示方式\"><a href=\"#3-1-类的表示方式\" class=\"headerlink\" title=\"3.1 类的表示方式\"></a>3.1 类的表示方式</h2><p>在UML类图中，类使用包含类名、属性(field) 和方法(method) 且带有分割线的矩形来表示，比如下图表示一个Employee类，它包含name,age和address这3个属性，以及work()方法。 </p>\n<p><img src=\"https://picture.saintblog.top/DesignPatterns/uml/demo.png\" alt=\"\"></p>\n<p>属性/方法名称前加的加号和减号表示了这个属性/方法的可见性，UML类图中表示可见性的符号有三种：</p>\n<ul>\n<li><p>+：表示public</p>\n</li>\n<li><p>-：表示private</p>\n</li>\n<li><p>#：表示protected</p>\n</li>\n</ul>\n<p>属性的完整表示方式是： <strong>可见性  名称 ：类型 [ = 缺省值]</strong>  </p>\n<p>方法的完整表示方式是： <strong>可见性  名称(参数列表) [ ： 返回类型]</strong></p>\n<blockquote>\n<p>注意：</p>\n<p>​    1，中括号中的内容表示是可选的</p>\n<p>​    2，也有将类型放在变量名前面，返回值类型放在方法名前面</p>\n</blockquote>\n<p><strong>举个栗子：</strong></p>\n<p><img src=\"https://picture.saintblog.top/DesignPatterns/uml/demo.png\" alt=\"\"></p>\n<p>上图Demo类定义了三个方法：</p>\n<ul>\n<li>method()方法：修饰符为public，没有参数，没有返回值。</li>\n<li>method1()方法：修饰符为private，没有参数，返回值类型为String。</li>\n<li>method2()方法：修饰符为protected，接收两个参数，第一个参数类型为int，第二个参数类型为String，返回值类型是int。</li>\n</ul>\n<h2 id=\"3-2-类与类之间关系的表示方式\"><a href=\"#3-2-类与类之间关系的表示方式\" class=\"headerlink\" title=\"3.2 类与类之间关系的表示方式\"></a>3.2 类与类之间关系的表示方式</h2><h3 id=\"3-2-1-关联关系\"><a href=\"#3-2-1-关联关系\" class=\"headerlink\" title=\"3.2.1 关联关系\"></a>3.2.1 关联关系</h3><p>关联关系是对象之间的一种引用关系，用于表示一类对象与另一类对象之间的联系，如老师和学生、师傅和徒弟、丈夫和妻子等。关联关系是类与类之间最常用的一种关系，分为一般关联关系、聚合关系和组合关系。我们先介绍一般关联。</p>\n<p>关联又可以分为单向关联，双向关联，自关联。</p>\n<p><strong>1，单向关联</strong></p>\n<p><img src=\"https://picture.saintblog.top/DesignPatterns/uml/customer_address.png\" alt=\"\"></p>\n<p>在UML类图中单向关联用一个带箭头的实线表示。上图表示每个顾客都有一个地址，这通过让Customer类持有一个类型为Address的成员变量类实现。</p>\n<p><strong>2，双向关联</strong></p>\n<p><img src=\"https://picture.saintblog.top/DesignPatterns/uml/customer_product.png\" alt=\"\"></p>\n<p>从上图中我们很容易看出，所谓的双向关联就是双方各自持有对方类型的成员变量。</p>\n<p>在UML类图中，双向关联用一个不带箭头的直线表示。上图中在Customer类中维护一个List&lt;Product&gt;，表示一个顾客可以购买多个商品；在Product类中维护一个Customer类型的成员变量表示这个产品被哪个顾客所购买。</p>\n<p><strong>3，自关联</strong></p>\n<p><img src=\"https://picture.saintblog.top/DesignPatterns/uml/node.png\" alt=\"\"></p>\n<p>自关联在UML类图中用一个带有箭头且指向自身的线表示。上图的意思就是Node类包含类型为Node的成员变量，也就是“自己包含自己”。</p>\n<h3 id=\"3-2-2-聚合关系\"><a href=\"#3-2-2-聚合关系\" class=\"headerlink\" title=\"3.2.2 聚合关系\"></a>3.2.2 聚合关系</h3><p>聚合关系是关联关系的一种，是强关联关系，是整体和部分之间的关系。</p>\n<p>聚合关系也是通过成员对象来实现的，其中成员对象是整体对象的一部分，但是成员对象可以脱离整体对象而独立存在。例如，学校与老师的关系，学校包含老师，但如果学校停办了，老师依然存在。</p>\n<p>在 UML 类图中，聚合关系可以用带空心菱形的实线来表示，菱形指向整体。下图所示是大学和教师的关系图：</p>\n<p><img src=\"https://picture.saintblog.top/DesignPatterns/uml/image-20191229173422328.png\" alt=\"\"></p>\n<h3 id=\"3-2-3-组合关系\"><a href=\"#3-2-3-组合关系\" class=\"headerlink\" title=\"3.2.3 组合关系\"></a>3.2.3 组合关系</h3><p>组合表示类之间的整体与部分的关系，但它是一种更强烈的聚合关系。</p>\n<p>在组合关系中，整体对象可以控制部分对象的生命周期，一旦整体对象不存在，部分对象也将不存在，部分对象不能脱离整体对象而存在。例如，头和嘴的关系，没有了头，嘴也就不存在了。</p>\n<p>在 UML 类图中，组合关系用带实心菱形的实线来表示，菱形指向整体。下图所示是头和嘴的关系图：</p>\n<p><img src=\"https://picture.saintblog.top/DesignPatterns/uml/image-20191229173455149.png\" alt=\"\"></p>\n<h3 id=\"3-2-4-依赖关系\"><a href=\"#3-2-4-依赖关系\" class=\"headerlink\" title=\"3.2.4 依赖关系\"></a>3.2.4 依赖关系</h3><p>依赖关系是一种使用关系，它是对象之间耦合度最弱的一种关联方式，是临时性的关联。在代码中，某个类的方法通过局部变量、方法的参数或者对静态方法的调用来访问另一个类（被依赖类）中的某些方法来完成一些职责。</p>\n<p>在 UML 类图中，依赖关系使用带箭头的虚线来表示，箭头从使用类指向被依赖的类。下图所示是司机和汽车的关系图，司机驾驶汽车：</p>\n<p><img src=\"https://picture.saintblog.top/DesignPatterns/uml/image-20191229173518926.png\" alt=\"\"></p>\n<h3 id=\"3-2-5-继承关系\"><a href=\"#3-2-5-继承关系\" class=\"headerlink\" title=\"3.2.5 继承关系\"></a>3.2.5 继承关系</h3><p>继承关系是对象之间耦合度最大的一种关系，表示一般与特殊的关系，是父类与子类之间的关系，是一种继承关系。</p>\n<p>在 UML 类图中，泛化关系用带空心三角箭头的实线来表示，箭头从子类指向父类。在代码实现时，使用面向对象的继承机制来实现泛化关系。例如，Student 类和 Teacher 类都是 Person 类的子类，其类图如下图所示：</p>\n<p><img src=\"https://picture.saintblog.top/DesignPatterns/uml/image-20191229173539838.png\" alt=\"\"></p>\n<h3 id=\"3-2-6-实现关系\"><a href=\"#3-2-6-实现关系\" class=\"headerlink\" title=\"3.2.6 实现关系\"></a>3.2.6 实现关系</h3><p>实现关系是接口与实现类之间的关系。在这种关系中，类实现了接口，类中的操作实现了接口中所声明的所有的抽象操作。</p>\n<p>在 UML 类图中，实现关系使用带空心三角箭头的虚线来表示，箭头从实现类指向接口。例如，汽车和船实现了交通工具，其类图如图 9 所示。</p>\n<p><img src=\"https://picture.saintblog.top/DesignPatterns/uml/image-20191229173554296.png\" alt=\"\"></p>\n","categories":[{"name":"设计模式","path":"api/categories/设计模式.json"}],"tags":[{"name":"编程","path":"api/tags/编程.json"},{"name":"UML","path":"api/tags/UML.json"}]}